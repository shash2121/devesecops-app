pipeline {
  agent any
  environment{
      DOCKERHUB_USERNAME = "sha2121"
       APP_NAME = "numeric-app"
        IMAGE_TAG = "${BUILD_NUMBER}"
        IMAGE_NAME = "${DOCKERHUB_USERNAME}"+ "/" + "${APP_NAME}"
        TRIVY_IMG = "${IMAGE_NAME}"+":"+"${IMAGE_TAG}"
  }
  stages {
      stage('code checkout'){
            steps{
            checkout([
            $class: 'GitSCM',
            branches: [[name: '*/main']],
            userRemoteConfigs: [[url: 'https://github.com/shash2121/devesecops-app.git']]
        ])
        }
        }
        stage('docker login'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh "docker login -u $username -p $password"
                }
            }
        }
      stage('Build Artifact') {
            steps {
              sh "mvn clean package -DskipTests=true"
              archive 'target/*.jar' //so that they can be downloaded later
            }
        }
        stage('Run unit tests') {
            steps{
                sh "mvn test"
            }
            post {
              always {
                junit 'target/surefire-reports/*.xml'
                jacoco execPattern: 'target/jacoco.exec'
                    }
                }
        }
        stage("Sonarqube - SAST"){
            steps{
            // In order to use withSonarQubeEnv, generate token in sonar and create credential in jenkins
            // Also, use the creds in configure system in jenkins under sonar section
                withSonarQubeEnv('SonarQube') { 
                sh "mvn clean verify sonar:sonar -Dsonar.projectKey=numeric-application -Dsonar.projectName='numeric-application' -Dsonar.host.url=http://localhost:9000"
            }
            
        }
        }
        //stage('Vulnerability Scan - Docker ') {
         //        steps {
        //      sh "mvn dependency-check:check"
        //     }
        //     post {
        //       always {
        //         dependencyCheckPublisher pattern: 'target/dependency-check-report.xml'
       //       }
       //       }
      //       }
       // This stage will scan the base image in dockerfile
        stage('Trivy Scan') {
            steps {    
                sh "bash trivy-docker-image-scan.sh"   
                }
            }
        stage('OPA Conftest'){
            steps{
                sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-security.rego Dockerfile'
            }
        }
        stage('Build and push to docker hub'){
            steps{
           dir("${WORKSPACE}") {
          sh """
            docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
            docker push ${IMAGE_NAME}:${IMAGE_TAG}
            """
        }
            }
        }
        stage('Vulnerability Scan - Kubernetes') {
      steps {
        parallel(
          "OPA Scan": {
            sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-k8s-security.rego k8s_deployment_service.yaml'
          },
          "Kubesec Scan": {
            sh "bash kubesec-scan.sh"
          },
          {
          // This trivy scan is for scanning the final image  
          "Trivy Scan": {
            sh "bash trivy-k8s-scan.sh"  
          }
          }
        )
      }
    }
         stage('Kubernetes Deployment - DEV') {
      steps {
        dir("${WORKSPACE}") {
          sh """
          sed -i 's/${DOCKERHUB_USERNAME}\\/${APP_NAME}/${DOCKERHUB_USERNAME}\\/${APP_NAME}:${BUILD_NUMBER}/g' k8s_deployment_service.yaml
          kubectl apply -f k8s_deployment_service.yaml
          """
      }
      }
    }
    
    stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
    }
}